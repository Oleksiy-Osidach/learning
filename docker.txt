docker ps — look at the list of the started containers
-q — only id
-a — all containers

docker pull — download images (docker hub)

docker build — create images
This command collects the Docker image from the dockerfile and build context. An assembly context is a set of files located in a specific path.
-t  - option to specify the image name, for example, "docker build -t my." Collects an image from the current directory 
(".") - the last parameter is the directory name, in our case the dot indicates that the directory is current.

docker logs — see logs containers
-follow - see log runing container, (docker logs -follow 315613.)

docker run — run container
docker run my -it bash - run container MY + bash

docker stop — stop container
docker stop my_cont - 1 container
docker stop $(docker ps -a -q) - all container

docker kill — kill process container
docker kill $(ps -a -q) - kill process all container

docker rm — delete container

docker rmi — delete images (after stopping all connected containers)


--------

docker container prune - delete all not run container

----------------

docker start “ID”  - start container

docker run -p 3000:3000 13f5 - first 3000 - port which want to use, second 3000 - port in images

docker run -d -p 80:3000 13f5  - -d detached - not block terminal.

docker run -d -p 80:3000 --name logsapp 13f5 - "--name logsapp" - name of the container (default - automatic name)

 docker run -d -p 3000:3000 -- name logsapp --rm 60ee - "--rm - after stopping the container will be deleted"


-------------------------- 
Dockerfiles  - for Docker app instruction for make images (only name "Dockerfile")

	FROM node (base images, if not look local, docker install from https://hub.docker.com/)

	WORKDIR /app

	COPY package.json /app  - add in cach, 

	RUN npm install

	COPY . . (testfile.txt c:\\)(first "."" - local folder, second "." local folder create images)

	ENV PORT 4200

	EXPOSE $PORT

	VOLUME ["/app/data"] - save data when deleting container

	CMD  ["node", "app.js"]

	

docker attach id - connected to container in console

docker logs id - shows what happened in the container 

docker build -t logsapp . - "-t logsapp - name images"


________________________________________

docker login - conect to your accaunt on docker hub

docker push oleksiyosidach/logsapp:latest - (push images on docker hub)

docker pull oleksiyosidach/logsapp:latest - (pull images on docker hub)

docker image inspect logsapp - description image


docker run -d -p 3000:3000 -v logs:/app/data --rm --name logsapp logsapp:volumes
-v logs:/app/data - save data, name volume "logs:"

docker volume prune, rm, inspect, create, ls





